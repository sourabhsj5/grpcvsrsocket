package rsocketclient.rsocketclient;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ThreadFactory;

import org.HdrHistogram.Histogram;

import com.test.productOffering.model.ProductOfferingServiceGrpc;
import com.test.productOffering.model.ProductOfferings;
import com.test.rsocket.server.rsocketserver.ProductOrderRequest;
import com.test.rsocket.server.rsocketserver.ProductOrderResponse;
import com.test.rsocket.server.rsocketserver.ProductOrderServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.util.concurrent.DefaultThreadFactory;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

public class MultithreadedGrpcRequestReplyClient {

    public static void main(String... args) throws Exception {
        ProductOrderRequest productOrderRequest = ProductOrderRequest.newBuilder().setId("asdasdadas").build();
        String host = System.getProperty("host", "127.0.0.1");
        int port = Integer.getInteger("port", 9977);
        int count = Integer.getInteger("count", 100000);
        int concurrency = Integer.getInteger("concurrency", 64);
        int threads = Integer.getInteger("threads", 16);
        boolean useEpoll = Boolean.getBoolean("usePoll");

        ThreadFactory tf = new DefaultThreadFactory("client-elg-", true /* daemon */);
        NioEventLoopGroup worker = new NioEventLoopGroup(0, tf);

        Class channel;

//    if (useEpoll) {
//      channel = EpollSocketChannel.class;
//    } else {
        channel = NioSocketChannel.class;
//    }

        Histogram histogram = new Histogram(3600000000000L, 3);
        System.out.println("starting test - sending {}" + count);
        CountDownLatch latch = new CountDownLatch(threads);
        long start = System.nanoTime();
        Flux.range(1, threads).flatMap(i -> {
            //System.out.println("start thread -> {}" + i);
            ManagedChannel managedChannel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();
            ManagedChannel managedChannelOffering = ManagedChannelBuilder.forAddress(host, 9988).usePlaintext().build();
            ProductOrderServiceGrpc.ProductOrderServiceStub simpleService = ProductOrderServiceGrpc
                    .newStub(managedChannel);
            ProductOfferingServiceGrpc.ProductOfferingServiceStub productOfferingServiceStub = ProductOfferingServiceGrpc
                    .newStub(managedChannelOffering);
            return Mono.fromRunnable(() -> {
                int i1 = count / threads;
                try {
                    latch.countDown();
                    latch.await();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                execute(i1, simpleService, histogram, productOrderRequest, productOfferingServiceStub, concurrency);
            }).subscribeOn(Schedulers.elastic());
        }).blockLast();

        histogram.outputPercentileDistribution(System.out, 1000.0d);
        double completedMillis = (System.nanoTime() - start) / 1_000_000d;
        double rps = count / ((System.nanoTime() - start) / 1_000_000_000d);
        System.out.println("test complete in {} ms" + completedMillis);
        System.out.println("test rps {}" + rps);
    }

    private static void execute(int count, ProductOrderServiceGrpc.ProductOrderServiceStub simpleService,
                                Histogram histogram, ProductOrderRequest productOrderRequest,
                                ProductOfferingServiceGrpc.ProductOfferingServiceStub productOfferingServiceStub, int concurrency) {
        Flux.range(1, count).flatMap(integer -> {
            long s = System.nanoTime();
            return Flux.create(sink -> {
                simpleService.getProductOrder(productOrderRequest, new StreamObserver<ProductOrderResponse>() {
                    @Override
                    public void onNext(ProductOrderResponse poresponse) {
                        readProductResponse(poresponse);
                        Flux.create(posink -> {
                            productOfferingServiceStub.getProductOfferings(
                                    ProductOfferingsRequestBuilder.prepareProductOfferingsRequest(),
                                    new StreamObserver<ProductOfferings>() {

                                        @Override
                                        public void onNext(ProductOfferings value) {
                                            //System.out.println(
                                            //		"reading product offering " + value.getProductOfferingCount());
                                            ProductOfferingsReader.readRequest(value);
                                            posink.next(value);
                                        }

                                        @Override
                                        public void onError(Throwable t) {
                                            posink.error(t);
                                        }

                                        @Override
                                        public void onCompleted() {
                                            posink.complete();
                                        }
                                    });
                        }).blockLast();

                        sink.next(poresponse);
                    }

                    @Override
                    public void onError(Throwable t) {
                        sink.error(t);
                    }

                    @Override
                    public void onCompleted() {
                        histogram.recordValue(System.nanoTime() - s);
                        sink.complete();
                    }
                });
            });
        }, concurrency).blockLast();
    }

    private static void readProductResponse(ProductOrderResponse productResponse) {
        //System.out.println("reading poresponse " + productResponse.getDescription());
        ProductOrderProtobufResponseReader.readProductOrderResponse(productResponse);
    }
}