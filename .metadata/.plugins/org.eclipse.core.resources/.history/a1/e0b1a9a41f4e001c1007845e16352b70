package rsocketclient.rsocketclient;

import java.time.Duration;
import java.util.concurrent.CountDownLatch;

import org.HdrHistogram.Histogram;

import com.amdocs.productOffering.model.ProductOfferingServiceClient;
import com.amdocs.productOffering.model.ProductOfferings;
import com.example.rsocket.server.rsocketserver.ProductOrderRequest;
import com.example.rsocket.server.rsocketserver.ProductOrderResponse;
import com.example.rsocket.server.rsocketserver.ProductOrderServiceClient;

import io.rsocket.RSocket;
import io.rsocket.core.RSocketConnector;
import io.rsocket.transport.netty.client.TcpClientTransport;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

public class MultithreadedRSocketRpcRequestReplyClient {

  public static void main(String... args) {
	ProductOrderRequest productOrderRequest = ProductOrderRequest.newBuilder().setId("asdasdadas").build();
	ProductOfferings productOfferings = ProductOfferingsRequestBuilder.prepareProductOfferingsRequest();
    String host = System.getProperty("host", "127.0.0.1");
    int port = Integer.getInteger("port", 6666);
    int count = Integer.getInteger("count", 10000);
    int concurrency = Integer.getInteger("concurrency", 64);
    int threads = Integer.getInteger("threads", 16);

    Histogram histogram = new Histogram(3600000000000L, 3);

    System.out.println("starting test - sending {}"+ count);
    CountDownLatch latch = new CountDownLatch(threads);
    long start = System.nanoTime();
    Flux.range(1, threads)
        .flatMap(
            i -> {
              return Mono.fromRunnable(
                      () -> {
                        System.out.println("start thread -> {}"+ i);
//                        RSocket rSocket =
//                            RSocketFactory.connect()
//                                .frameDecoder(Frame::retain)
//                                .keepAlive(Duration.ofSeconds(1), Duration.ofSeconds(5), 1)
//                                .transport(TcpClientTransport.create(host, port))
//                                .start()
//                                .block();
                        RSocket rSocket = RSocketConnector.create().keepAlive(Duration.ofSeconds(1), Duration.ofSeconds(50)).connect(TcpClientTransport.create(host, port)).cache().block();
                        RSocket rSocketOffering = RSocketConnector.create().keepAlive(Duration.ofSeconds(1), Duration.ofSeconds(50)).connect(TcpClientTransport.create(host, 6688)).cache().block();
                        ProductOrderServiceClient client = new ProductOrderServiceClient(rSocket);
                        ProductOfferingServiceClient offeringClient = new ProductOfferingServiceClient(rSocketOffering);
                        int i1 = count / threads;
                        try {
                          latch.countDown();
                          latch.await();
                        } catch (InterruptedException e) {
                          throw new RuntimeException(e);
                        }
                        Flux.range(0, i1)
                            .flatMap(
                                integer -> {
                                  long s = System.nanoTime();

                                  return client
                                      .getProductOrder(productOrderRequest)
                                      .doOnNext(poresponse -> {
                                    	  readProductResponse(poresponse);
                                      })
                                      .doFinally(
                                          simpleResponse -> {
                                            histogram.recordValue(System.nanoTime() - s);
                                          }).flatMap(poresponse->
                                          	{
                                        	  return offeringClient.getProductOfferings(productOfferings)
 											 .doOnSuccess(offerings->{
 												 System.out.println("reading product offering " + offerings.getProductOfferingCount());
 	                                    		  ProductOfferingsReader.readRequest(offerings);
 	                                    	  });
                                          });
                                        		  
                                },
                                concurrency)
                            .blockLast();
                      })
                  .subscribeOn(Schedulers.elastic());
            })
        .blockLast();

    histogram.outputPercentileDistribution(System.out, 1000.0d);
    double completedMillis = (System.nanoTime() - start) / 1_000_000d;
    double rps = count / ((System.nanoTime() - start) / 1_000_000_000d);
    System.out.println("test complete in {} ms" + completedMillis);
    System.out.println("test rps {}" + rps);
  }
  private static void readProductResponse(ProductOrderResponse productResponse) {
	  System.out.println("reading poresponse " + productResponse.getDescription());
		ProductOrderProtobufResponseReader.readProductOrderResponse(productResponse);
	}
}