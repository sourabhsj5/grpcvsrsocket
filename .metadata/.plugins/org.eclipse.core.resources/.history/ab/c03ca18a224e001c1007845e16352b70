package rsocket.rsocketserver;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.buffer.DefaultDataBufferFactory;
import org.springframework.http.codec.protobuf.ProtobufDecoder;
import org.springframework.http.codec.protobuf.ProtobufEncoder;
import org.springframework.messaging.rsocket.RSocketRequester;
import org.springframework.messaging.rsocket.RSocketStrategies;
import org.springframework.stereotype.Component;

import io.rsocket.transport.netty.client.TcpClientTransport;

@SpringBootApplication
public class RsocketServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(RsocketServerApplication.class, args);
    }

}
@Configuration
class RSocketConfig {
@Bean
public RSocketStrategies rsocketStrategies() {
    return RSocketStrategies.builder()
        .decoder(new ProtobufDecoder())
        .encoder(new ProtobufEncoder())
//    		.decoder(new MessagePackDecoder())
//    		.encoder(new MessagePackEncoder())
        .dataBufferFactory(new DefaultDataBufferFactory(true))
        .build();
}
}
@Component
class RSocketClient {

    @Autowired
    private RSocketRequester.Builder builder;

    public RSocketRequester getRequester() {
        return builder.transport(TcpClientTransport.create("localhost", 6666));
    }

}

//
//@Configuration
//class Config{
//
//@Bean
//    public RSocketServerCustomizer rSocketServerCustomizer(RSocketServer rSocketServer){
//    rSocketServer.
//}
//
//}

